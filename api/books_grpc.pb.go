// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: books.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookerClient is the client API for Booker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookerClient interface {
	GetBooks(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Books, error)
	GetAuthor(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Author, error)
	AddBook(ctx context.Context, in *AddBook, opts ...grpc.CallOption) (*ResponceID, error)
	AddAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*ResponceID, error)
}

type bookerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookerClient(cc grpc.ClientConnInterface) BookerClient {
	return &bookerClient{cc}
}

func (c *bookerClient) GetBooks(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Books, error) {
	out := new(Books)
	err := c.cc.Invoke(ctx, "/api.Booker/GetBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookerClient) GetAuthor(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/api.Booker/GetAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookerClient) AddBook(ctx context.Context, in *AddBook, opts ...grpc.CallOption) (*ResponceID, error) {
	out := new(ResponceID)
	err := c.cc.Invoke(ctx, "/api.Booker/addBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookerClient) AddAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*ResponceID, error) {
	out := new(ResponceID)
	err := c.cc.Invoke(ctx, "/api.Booker/addAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookerServer is the server API for Booker service.
// All implementations must embed UnimplementedBookerServer
// for forward compatibility
type BookerServer interface {
	GetBooks(context.Context, *Author) (*Books, error)
	GetAuthor(context.Context, *Book) (*Author, error)
	AddBook(context.Context, *AddBook) (*ResponceID, error)
	AddAuthor(context.Context, *Author) (*ResponceID, error)
	mustEmbedUnimplementedBookerServer()
}

// UnimplementedBookerServer must be embedded to have forward compatible implementations.
type UnimplementedBookerServer struct {
}

func (UnimplementedBookerServer) GetBooks(context.Context, *Author) (*Books, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookerServer) GetAuthor(context.Context, *Book) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedBookerServer) AddBook(context.Context, *AddBook) (*ResponceID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookerServer) AddAuthor(context.Context, *Author) (*ResponceID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthor not implemented")
}
func (UnimplementedBookerServer) mustEmbedUnimplementedBookerServer() {}

// UnsafeBookerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookerServer will
// result in compilation errors.
type UnsafeBookerServer interface {
	mustEmbedUnimplementedBookerServer()
}

func RegisterBookerServer(s grpc.ServiceRegistrar, srv BookerServer) {
	s.RegisterService(&Booker_ServiceDesc, srv)
}

func _Booker_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookerServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Booker/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookerServer).GetBooks(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booker_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookerServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Booker/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookerServer).GetAuthor(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booker_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookerServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Booker/addBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookerServer).AddBook(ctx, req.(*AddBook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booker_AddAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookerServer).AddAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Booker/addAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookerServer).AddAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

// Booker_ServiceDesc is the grpc.ServiceDesc for Booker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Booker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Booker",
	HandlerType: (*BookerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooks",
			Handler:    _Booker_GetBooks_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _Booker_GetAuthor_Handler,
		},
		{
			MethodName: "addBook",
			Handler:    _Booker_AddBook_Handler,
		},
		{
			MethodName: "addAuthor",
			Handler:    _Booker_AddAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "books.proto",
}
